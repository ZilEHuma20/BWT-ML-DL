# -*- coding: utf-8 -*-
"""Iterators_generators

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nmep7RsRipbbjrpqzAorqowQ0fyhN47Z
"""

class Countdown:
    def __init__(self, n):
        self.n = n

    def __iter__(self):
        return self

    def __next__(self):
        if self.n < 1:
            raise StopIteration
        else:
            result = self.n
            self.n -= 1
            return result

# The fibonacci_generator function is now outside the Countdown class
def fibonacci_generator(limit):
    a, b = 0, 1
    while a <= limit:
        yield a
        a, b = b, a + b

import random

def random_number_generator(start, end, count):
    for _ in range(count):
        yield random.randint(start, end)

# from countdown import Countdown # This import is not needed in this context
# from fibonacci_generator import fibonacci_generator # This import is not needed in this context
# from random_number_generator import random_number_generator # This import is not needed in this context

def main():
    print("Countdown Iterator:")
    countdown = Countdown(10)
    for num in countdown:
        print(num)

    print("\nFibonacci Generator:")
    fib_gen = fibonacci_generator(100)
    for num in fib_gen:
        print(num, end=" ")

    print("\n\nRandom Number Generator:")
    rand_gen = random_number_generator(1, 100, 10)
    for num in rand_gen:
        print(num, end=" ")

if __name__ == "__main__":
    main()