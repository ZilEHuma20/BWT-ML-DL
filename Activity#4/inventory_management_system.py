# -*- coding: utf-8 -*-
"""Inventory Management System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wr75Q8rozCLFgN1jN32UQisszeXqttun
"""

from datetime import datetime, timedelta

class FoodItem:
    def __init__(self, name, category, quantity, barcode, expiry_date):
        self.name = name
        self.category = category
        self.quantity = quantity
        self.barcode = barcode
        self.expiry_date = datetime.strptime(expiry_date, "%Y-%m-%d").date()

    def __str__(self):
        return f"{self.name} (Category: {self.category}, Quantity: {self.quantity}, Barcode: {self.barcode}, Expiry Date: {self.expiry_date.strftime('%Y-%m-%d')})"

    def is_near_expiry(self):
        today = datetime.now().date()
        days_until_expiry = (self.expiry_date - today).days
        return days_until_expiry <= 7  # Considered near expiry if within 7 days

    def update_quantity(self, quantity):
        self.quantity += quantity

    def update_expiry_date(self, new_expiry_date):
        self.expiry_date = datetime.strptime(new_expiry_date, "%Y-%m-%d").date()

class Inventory:
    def __init__(self):
        self.inventory = []

    def add_item(self, food_item):
        self.inventory.append(food_item)

    def delete_item(self, barcode):
        for item in self.inventory:
            if item.barcode == barcode:
                self.inventory.remove(item)
                return True
        return False  # Return False if item with given barcode is not found

    def search_item(self, keyword):
        results = []
        for item in self.inventory:
            if keyword.lower() in item.name.lower() or keyword.lower() in item.category.lower():
                results.append(item)
        return results

    def list_near_expiry_items(self):
        near_expiry_items = [item for item in self.inventory if item.is_near_expiry()]
        return near_expiry_items

    def display_inventory(self):
        for item in self.inventory:
            print(item)

# Create instances of FoodItem
item1 = FoodItem("Apple", "Fruit", 10, "123456789", "2024-12-31")
item2 = FoodItem("Milk", "Dairy", 5, "987654321", "2024-07-15")
item3 = FoodItem("Bread", "Bakery", 3, "456789123", "2024-07-10")

# Create an instance of Inventory
inventory = Inventory()

# Add items to the inventory
inventory.add_item(item1)
inventory.add_item(item2)
inventory.add_item(item3)

# Display inventory
print("Current Inventory:")
inventory.display_inventory()

# Test search functionality
print("\nSearching for 'apple':")
results = inventory.search_item("apple")
for result in results:
    print(result)

# Test near expiry items
print("\nNear Expiry Items:")
near_expiry_items = inventory.list_near_expiry_items()
for item in near_expiry_items:
    print(item)

import csv

# Example inventory data
current_inventory = [
    {"Name": "Apple", "Category": "Fruit", "Quantity": 10, "Barcode": "123456789", "Expiry Date": "2024-12-31"},
    {"Name": "Milk", "Category": "Dairy", "Quantity": 5, "Barcode": "987654321", "Expiry Date": "2024-07-15"},
    {"Name": "Bread", "Category": "Bakery", "Quantity": 3, "Barcode": "456789123", "Expiry Date": "2024-07-10"},
]

# File path to save the CSV file
file_path = "inventory_data.csv"

# Write the data to a CSV file
try:
    with open(file_path, mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=["Name", "Category", "Quantity", "Barcode", "Expiry Date"])

        # Write header
        writer.writeheader()

        # Write inventory data
        for item in current_inventory:
            writer.writerow(item)

    print(f"Inventory data successfully saved to {file_path}.")
except Exception as e:
    print(f"Error saving inventory data to {file_path}: {e}")

import csv
from datetime import datetime

class FoodItem:
    def __init__(self, name, category, quantity, barcode, expiry_date):
        self.name = name
        self.category = category
        self.quantity = quantity
        self.barcode = barcode
        self.expiry_date = datetime.strptime(expiry_date, "%Y-%m-%d").date()

    def __str__(self):
        return f"{self.name} (Category: {self.category}, Quantity: {self.quantity}, Barcode: {self.barcode}, Expiry Date: {self.expiry_date.strftime('%Y-%m-%d')})"

    def is_near_expiry(self):
        today = datetime.now().date()
        days_until_expiry = (self.expiry_date - today).days
        return days_until_expiry <= 7  # Considered near expiry if within 7 days

    def update_quantity(self, quantity):
        self.quantity += quantity

    def update_expiry_date(self, new_expiry_date):
        self.expiry_date = datetime.strptime(new_expiry_date, "%Y-%m-%d").date()

class Inventory:
    def __init__(self):
        self.inventory = []

    def add_item(self, food_item):
        self.inventory.append(food_item)

    def delete_item(self, barcode):
        for item in self.inventory:
            if item.barcode == barcode:
                self.inventory.remove(item)
                return True
        return False  # Return False if item with given barcode is not found

    def search_item(self, keyword):
        results = []
        for item in self.inventory:
            if keyword.lower() in item.name.lower() or keyword.lower() in item.category.lower():
                results.append(item)
        return results

    def list_near_expiry_items(self):
        near_expiry_items = [item for item in self.inventory if item.is_near_expiry()]
        return near_expiry_items

    def display_inventory(self):
        for item in self.inventory:
            print(item)

    def save_inventory_to_csv(self, file_path):
        try:
            with open(file_path, mode='w', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(["Name", "Category", "Quantity", "Barcode", "Expiry Date"])
                for item in self.inventory:
                    writer.writerow([item.name, item.category, item.quantity, item.barcode, item.expiry_date.strftime('%Y-%m-%d')])
            print(f"Inventory data successfully saved to {file_path}.")
        except FileNotFoundError:
            print(f"Error: File '{file_path}' not found.")
        except PermissionError:
            print(f"Error: Permission denied for writing to '{file_path}'.")
        except Exception as e:
            print(f"Error saving inventory data to {file_path}: {e}")

import csv
from datetime import datetime

class FoodItem:
    def __init__(self, name, category, quantity, barcode, expiry_date):
        self.name = name
        self.category = category
        self.quantity = quantity
        self.barcode = barcode
        self.expiry_date = datetime.strptime(expiry_date, "%Y-%m-%d").date()

    def __str__(self):
        return f"{self.name} (Category: {self.category}, Quantity: {self.quantity}, Barcode: {self.barcode}, Expiry Date: {self.expiry_date.strftime('%Y-%m-%d')})"

    def is_near_expiry(self):
        today = datetime.now().date()
        days_until_expiry = (self.expiry_date - today).days
        return days_until_expiry <= 7  # Considered near expiry if within 7 days

    def update_quantity(self, quantity):
        self.quantity += quantity

    def update_expiry_date(self, new_expiry_date):
        self.expiry_date = datetime.strptime(new_expiry_date, "%Y-%m-%d").date()

class Inventory:
    def __init__(self):
        self.inventory = []

    def add_item(self, food_item):
        self.inventory.append(food_item)

    def delete_item(self, barcode):
        for item in self.inventory:
            if item.barcode == barcode:
                self.inventory.remove(item)
                return True
        return False  # Return False if item with given barcode is not found

    def search_item(self, keyword):
        results = []
        for item in self.inventory:
            if keyword.lower() in item.name.lower() or keyword.lower() in item.category.lower():
                results.append(item)
        return results

    def list_near_expiry_items(self):
        near_expiry_items = [item for item in self.inventory if item.is_near_expiry()]
        return near_expiry_items

    def display_inventory(self):
        for item in self.inventory:
            print(item)

    def save_inventory_to_csv(self, file_path):
        try:
            with open(file_path, mode='w', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(["Name", "Category", "Quantity", "Barcode", "Expiry Date"])
                for item in self.inventory:
                    writer.writerow([item.name, item.category, item.quantity, item.barcode, item.expiry_date.strftime('%Y-%m-%d')])
            print(f"Inventory data successfully saved to {file_path}.")
        except FileNotFoundError:
            print(f"Error: File '{file_path}' not found.")
        except PermissionError:
            print(f"Error: Permission denied for writing to '{file_path}'.")
        except Exception as e:
            print(f"Error saving inventory data to {file_path}: {e}")


    def load_inventory_from_csv(self, file_path):
        try:
            with open(file_path, mode='r') as file:
                reader = csv.DictReader(file)
                for row in reader:
                    name = row['Name']
                    category = row['Category']
                    quantity = int(row['Quantity'])
                    barcode = row['Barcode']
                    expiry_date = row['Expiry Date']  # Keep as string
                    self.add_item(FoodItem(name, category, quantity, barcode, expiry_date))
            print(f"Inventory loaded successfully from {file_path}.")
        except FileNotFoundError:
            print(f"Error: File '{file_path}' not found.")
        except PermissionError:
            print(f"Error: Permission denied for reading '{file_path}'.")
        except csv.Error as e:
            print(f"Error reading CSV file '{file_path}': {e}")
        except Exception as e:
            print(f"Error loading inventory from {file_path}: {e}")

# Create an instance of Inventory
inventory = Inventory()

# Add items to the inventory (example)
item1 = FoodItem("Apple", "Fruit", 20, "123456789", "2024-12-31")
item2 = FoodItem("Milk", "Dairy", 10, "987654321", "2024-07-15")
item3 = FoodItem("Bread", "Bakery", 30, "456789123", "2024-07-10")
inventory.add_item(item1)
inventory.add_item(item2)
inventory.add_item(item3)

# Save inventory to CSV
inventory.save_inventory_to_csv("/content/inventory_data.csv")

# Clear current inventory for testing loading from CSV
inventory = Inventory()

# Load inventory from CSV
inventory.load_inventory_from_csv("/content/inventory_data.csv")

# Display loaded inventory
print("Inventory after loading:")
inventory.display_inventory()

# food_item.py

from datetime import datetime

class FoodItem:
    def __init__(self, name, category, quantity, barcode, expiry_date):
        self.name = name
        self.category = category
        self.quantity = quantity
        self.barcode = barcode
        self.expiry_date = datetime.strptime(expiry_date, "%Y-%m-%d").date()

    def __str__(self):
        return f"{self.name} (Category: {self.category}, Quantity: {self.quantity}, Barcode: {self.barcode}, Expiry Date: {self.expiry_date.strftime('%Y-%m-%d')})"

    def is_near_expiry(self):
        today = datetime.now().date()
        days_until_expiry = (self.expiry_date - today).days
        return days_until_expiry <= 7  # Considered near expiry if within 7 days

    def update_quantity(self, quantity):
        self.quantity += quantity

    def update_expiry_date(self, new_expiry_date):
        self.expiry_date = datetime.strptime(new_expiry_date, "%Y-%m-%d").date()

# file_manager.py

import csv
from .food_item import FoodItem
from datetime import datetime

def save_inventory_to_csv(inventory, file_path):
    try:
        with open(file_path, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["Name", "Category", "Quantity", "Barcode", "Expiry Date"])
            for item in inventory:
                writer.writerow([item.name, item.category, item.quantity, item.barcode, item.expiry_date.strftime('%Y-%m-%d')])
        print(f"Inventory data successfully saved to {file_path}.")
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
    except PermissionError:
        print(f"Error: Permission denied for writing to '{file_path}'.")
    except Exception as e:
        print(f"Error saving inventory data to {file_path}: {e}")

def load_inventory_from_csv(file_path):
    inventory = []
    try:
        with open(file_path, mode='r') as file:
            reader = csv.DictReader(file)
            for row in reader:
                name = row['Name']
                category = row['Category']
                quantity = int(row['Quantity'])
                barcode = row['Barcode']
                expiry_date = datetime.strptime(row['Expiry Date'], '%Y-%m-%d').date()
                inventory.append(FoodItem(name, category, quantity, barcode, expiry_date))
        print(f"Inventory loaded successfully from {file_path}.")
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
    except PermissionError:
        print(f"Error: Permission denied for reading '{file_path}'.")
    except csv.Error as e:
        print(f"Error reading CSV file '{file_path}': {e}")
    except Exception as e:
        print(f"Error loading inventory from {file_path}: {e}")
    return inventory

# __init__.py
from .food_item import FoodItem
from .inventory import Inventory
from .file_manager import save_inventory_to_csv, load_inventory_from_csv

from datetime import datetime, timedelta

class Inventory:
    def __init__(self):
        self.inventory = []

    def add_item(self, food_item):
        self.inventory.append(food_item)

    def delete_item(self, barcode):
        for item in self.inventory:
            if item.barcode == barcode:
                self.inventory.remove(item)
                return True
        return False  # Return False if item with given barcode is not found

    def search_item(self, keyword):
        results = []
        for item in self.inventory:
            if keyword.lower() in item.name.lower() or keyword.lower() in item.category.lower():
                results.append(item)
        return results

    def list_near_expiry_items(self):
        near_expiry_items = [item for item in self.inventory if item.is_near_expiry()]
        return near_expiry_items

    def display_inventory(self):
        for item in self.inventory:
            print(item)

    def save_inventory_to_csv(self, file_path):
        try:
            with open(file_path, mode='w', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(["Name", "Category", "Quantity", "Barcode", "Expiry Date"])
                for item in self.inventory:
                    writer.writerow([item.name, item.category, item.quantity, item.barcode, item.expiry_date.strftime('%Y-%m-%d')])
            print(f"Inventory data successfully saved to {file_path}.")
        except FileNotFoundError:
            print(f"Error: File '{file_path}' not found.")
        except PermissionError:
            print(f"Error: Permission denied for writing to '{file_path}'.")
        except Exception as e:
            print(f"Error saving inventory data to {file_path}: {e}")

    def load_inventory_from_csv(self, file_path):
        try:
            with open(file_path, mode='r') as file:
                reader = csv.DictReader(file)
                for row in reader:
                    name = row['Name']
                    category = row['Category']
                    quantity = int(row['Quantity'])
                    barcode = row['Barcode']
                    expiry_date = datetime.strptime(row['Expiry Date'], '%Y-%m-%d').date()
                    self.add_item(FoodItem(name, category, quantity, barcode, expiry_date))
            print(f"Inventory loaded successfully from {file_path}.")
        except FileNotFoundError:
            print(f"Error: File '{file_path}' not found.")
        except PermissionError:
            print(f"Error: Permission denied for reading '{file_path}'.")
        except csv.Error as e:
            print(f"Error reading CSV file '{file_path}': {e}")
        except Exception as e:
            print(f"Error loading inventory from {file_path}: {e}")

    def __iter__(self):
        self._index = 0
        return self

    def __next__(self):
        if self._index < len(self.inventory):
            item = self.inventory[self._index]
            self._index += 1
            return item
        else:
            raise StopIteration

    def nearing_expiry_generator(self):
        today = datetime.now().date()
        for item in self.inventory:
            days_until_expiry = (item.expiry_date - today).days
            if days_until_expiry <= 7:  # Adjust threshold as needed
                yield item

# Creating an inventory instance
inventory = Inventory()

# Adding items to the inventory
item1 = FoodItem("Apple", "Fruit", 10, "123456789", "2024-12-31")
item2 = FoodItem("Milk", "Dairy", 5, "987654321", "2024-07-15")
item3 = FoodItem("Bread", "Bakery", 3, "456789123", "2024-07-10")

inventory.add_item(item1)
inventory.add_item(item2)
inventory.add_item(item3)

# Using iterator to iterate through inventory
print("Iterating through inventory:")
for item in inventory:
    print(item)

# Creating an inventory instance
inventory = Inventory()

# Adding items to the inventory
item1 = FoodItem("Apple", "Fruit", 10, "123456789", "2024-12-31")
item2 = FoodItem("Milk", "Dairy", 5, "987654321", "2024-07-15")
item3 = FoodItem("Bread", "Bakery", 3, "456789123", "2024-07-10")

inventory.add_item(item1)
inventory.add_item(item2)
inventory.add_item(item3)

# Using generator to yield items nearing expiry
print("\nItems nearing expiry:")
for item in inventory.nearing_expiry_generator():
    print(item)



